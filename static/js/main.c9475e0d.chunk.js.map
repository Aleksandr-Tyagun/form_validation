{"version":3,"sources":["components/FormProgress/FormProgress.tsx","components/FormField/FormField.tsx","components/InputFile/InputFile.tsx","helpers/validators.ts","components/Form/Form.tsx","App.jsx","serviceWorker.js","index.js"],"names":["FormProgress","total","current","circles","Array","from","_","i","className","map","circle","Fragment","key","uuidv4","classNames","length","FormField","type","label","name","placeholder","value","textarea","errorMessage","validators","onChange","onBlur","inputAttr","String","autoComplete","toUpperCase","substr","gridAreaName","htmlFor","InputFile","handleInputFile","useState","files","setFiles","tabIndex","id","multiple","e","uploadedFiles","currentTarget","required","fieldsConfigs","range","min","max","defaultValues","companyName","numberOfPeople","companyArea","description","emptyErrors","Form","values","errors","form","setForm","handleChange","target","handleBlur","validateField","field","find","config","validator","filter","Boolean","join","onSubmit","preventDefault","newErrors","isValid","forEach","fieldErrors","console","log","handleSubmit","App","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9475e0d.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport './FormProgress.scss';\r\n\r\ntype Props = {\r\n  total: number;\r\n  current: number;\r\n}\r\n\r\nexport const FormProgress: React.FC<Props> = ({ total, current }) => {\r\n  const circles = Array.from(Array(total), (_, i) => i + 1);\r\n\r\n  return (\r\n    <div className=\"FormProgress\">\r\n      {circles.map(circle => (\r\n        <React.Fragment key={uuidv4()}>\r\n          <span\r\n            key={uuidv4()}\r\n            className={classNames(\r\n              'FormProgress__Circle',\r\n              { 'FormProgress__Circle--active': circle === current },\r\n              { 'FormProgress__Circle--disabled': circle > current }\r\n            )}>\r\n            {circle}\r\n          </span>\r\n          {circle !== circles.length && (\r\n            <span className=\"FormProgress__Line\" />\r\n          )}\r\n        </React.Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport './FormField.scss';\r\n\r\nexport const FormField: React.FC<FormField> = ({\r\n  type,\r\n  label,\r\n  name,\r\n  placeholder,\r\n  value,\r\n  textarea,\r\n  errorMessage,\r\n  validators,\r\n  onChange,\r\n  onBlur,\r\n}) => {\r\n\r\n  const gridAreaName = (name: string) => {\r\n    return name[0].toUpperCase() + name.substr(1);\r\n  }\r\n\r\n  let inputAttr = {\r\n    className: classNames(\r\n      'FormField__Input',\r\n      { 'FormField__Input--Error': errorMessage },\r\n      { 'FormField__Input--TextArea': textarea },\r\n    ),\r\n    name: String(name),\r\n    type,\r\n    placeholder,\r\n    value,\r\n    onChange,\r\n    onBlur,\r\n    autoComplete: 'off'\r\n  }\r\n\r\n  if (textarea) {\r\n    delete inputAttr.type;\r\n  }\r\n\r\n  return (\r\n    <div className={`FormField FormField--${gridAreaName(String(name))}`}>\r\n      <label\r\n        className=\"FormField__Label\"\r\n        htmlFor={String(name)}\r\n      >\r\n        {label}\r\n        {(validators || []).length !== 0 && (\r\n          <span className=\"FormField__Required\">*</span>\r\n        )}\r\n      </label>\r\n      <div className=\"FormField__InputArea\">\r\n        {textarea ? (\r\n          <textarea {...inputAttr} />\r\n        ) : (\r\n          <input {...inputAttr} />\r\n        )}\r\n      </div>\r\n      {errorMessage && (\r\n        <p className=\"FormField__ErrorMessage\">\r\n          {errorMessage}\r\n        </p>\r\n      )}\r\n\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport './InputFile.scss';\r\n\r\ntype Props = {\r\n  handleInputFile: (uploadedFiles: FileList) => void;\r\n}\r\n\r\nexport const InputFile: React.FC<Props> = ({ handleInputFile }) => {\r\n  const [files, setFiles] = useState<FileList>();\r\n\r\n  const handleInputChange = (uploadedFiles: FileList | null) => {\r\n    if (uploadedFiles?.length) {\r\n      setFiles(uploadedFiles);\r\n      handleInputFile(uploadedFiles);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"InputFile\">\r\n      <label className=\"InputFile__Label\" htmlFor=\"upload\">\r\n        <span className=\"InputFile__Title\">\r\n          Add file as attachment\r\n        </span>\r\n        <span className=\"InputFile__FilesAttached\">\r\n          {files?.length && `${files?.length} files attached`}\r\n        </span>\r\n      </label>\r\n      <input\r\n        className=\"InputFile__Button\"\r\n        tabIndex={-1}\r\n        type=\"file\"\r\n        id=\"upload\"\r\n        multiple\r\n        onChange={e => handleInputChange(e.currentTarget.files)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export const required = (value: string) => {\r\n  if (!value) {\r\n    return 'This field in required';\r\n  }\r\n\r\n  return '';\r\n}\r\n\r\nexport const range = (value: string, range: InputRange) => {\r\n  if (value && (+value < range.min || +value > range.max)) {\r\n    return `Please enter number from ${range.min} to ${range.max}`;\r\n  }\r\n\r\n  return '';\r\n}","import React, { useState } from 'react';\n\nimport './Form.scss';\nimport { FormField } from '../FormField';\nimport { InputFile } from '../InputFile';\nimport { required, range } from '../../helpers/validators';\n\nconst fieldsConfigs: FormField[] = [\n  {\n    name: 'companyName',\n    type: 'text',\n    label: 'Your company name',\n    placeholder: 'Type text',\n  },\n  {\n    name: 'numberOfPeople',\n    type: 'number',\n    placeholder: '1-99',\n    label: 'Number of people',\n    range: { min: 1, max: 99 },\n    validators: [required, range]\n  },\n  {\n    name: 'companyArea',\n    type: 'text',\n    label: 'Your company name',\n    placeholder: 'Design, Marketing, Development, etc.',\n    validators: [required]\n  },\n  {\n    name: 'description',\n    type: 'text',\n    label: 'Description',\n    placeholder: 'Type text',\n    textarea: true,\n    validators: [required]\n  },\n];\n\nconst defaultValues: FormValues = {\n  companyName: '',\n  numberOfPeople: '',\n  companyArea: '',\n  description: '',\n};\n\nconst emptyErrors: FormErrors = {\n  companyName: '',\n  numberOfPeople: '',\n  companyArea: '',\n  description: '',\n};\n\nexport const Form = () => {\n  const [form, setForm] = useState({\n    values: defaultValues,\n    errors: emptyErrors,\n  });\n  const [files, setFiles] = useState<FileList>();\n\n  const handleChange = (\n    { target: { name, value } }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    setForm({\n      values: {\n        ...form.values,\n        [name]: value,\n      },\n      errors: {\n        ...form.errors,\n        [name]: '',\n      },\n    });\n  };\n\n  const handleBlur = (\n    { target: { name } }: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ) => {\n    const errorMessage = validateField(name);\n\n    if (errorMessage) {\n      setForm({\n        values: {\n          ...form.values,\n        },\n        errors: {\n          ...form.errors,\n          [name]: errorMessage,\n        }\n      });\n    }\n  }\n\n  const validateField = (name: string) => {\n    const field = fieldsConfigs.find(config => config.name === name);\n\n    if (field && field.validators) {\n      const fieldErrors = field.validators.map(validator => {\n        return validator(form.values[name], field.range);\n      });\n\n      return fieldErrors.filter(Boolean).join(', ');\n    }\n\n    return '';\n  }\n\n  const handleInputFile = (uploadedFiles: FileList) => {\n    if (uploadedFiles.length) {\n      setFiles(uploadedFiles)\n    }\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const newErrors: FormErrors = { ...emptyErrors };\n    let isValid = true;\n\n    fieldsConfigs.forEach(({ name, range, validators = [] }) => {\n      const fieldErrors = validators.map(validator => {\n        return validator(form.values[name], range)\n      })\n\n      newErrors[name] = fieldErrors.filter(Boolean).join(', ')\n\n      if (newErrors[name]) {\n        isValid = false;\n      }\n    });\n\n    if (!isValid) {\n      setForm({\n        values: { ...form.values },\n        errors: newErrors,\n      });\n\n      return;\n    }\n\n    console.log('Submitted data:', form.values, files)\n\n    setForm({\n      values: defaultValues,\n      errors: emptyErrors,\n    });\n  };\n\n  return (\n    <form\n      className=\"Form\"\n      onSubmit={(e) => handleSubmit(e)}\n    >\n      {fieldsConfigs.map(\n        ({\n          name,\n          label,\n          range,\n          placeholder,\n          type,\n          textarea,\n          validators\n        }) => (\n            <FormField\n              key={name}\n              name={name}\n              type={type}\n              label={label}\n              range={range}\n              placeholder={placeholder}\n              value={form.values[name]}\n              textarea={textarea}\n              validators={validators}\n              errorMessage={form.errors[name]}\n              onChange={handleChange}\n              onBlur={handleBlur}\n            />\n          )\n      )}\n      <InputFile handleInputFile={handleInputFile} />\n      <button\n        className=\"Form__Sumbit\"\n        type=\"submit\"\n      >\n        Submit\n      </button>\n    </form>\n  );\n};\n\n","import React from 'react';\n\nimport './App.scss';\n\nimport { FormProgress } from './components/FormProgress';\nimport { Form } from './components/Form';\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <h1 className=\"App__Title\">Your first project</h1>\n      <FormProgress total={3} current={3} />\n      <Form />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}